generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model admin {
  admin_id       String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  admin_username String? @unique @db.VarChar(100)
  admin_email    String? @unique @db.VarChar(100)
  admin_password String? @db.VarChar(100)
}

model avatar {
  avatar_id  String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  gg_id      String? @db.Uuid
  avatar_url String? @db.VarChar(255)
  users      users?  @relation(fields: [gg_id], references: [gg_id], onDelete: Cascade, onUpdate: NoAction)
}

model cards {
  card_id           String  @id(map: "card_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  gg_id             String? @db.Uuid
  type              String? @db.VarChar(50)
  name              String? @db.VarChar(50)
  description       String?
  date_in           String? @db.VarChar
  date_out          String? @db.VarChar
  blood_group       String?
  emergency_contact String?
  emergency_details String?
  emergency_address String?
  users             users?  @relation(fields: [gg_id], references: [gg_id], onDelete: Cascade, onUpdate: NoAction, map: "card_gg_id_fkey")
}

model experience {
  experience_id    String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  gg_id            String?  @db.Uuid
  type             String?  @db.VarChar(50)
  name             String?  @db.VarChar(50)
  description      String?
  tools            String[]
  project_skills   String[]
  project_pictures String[]
  link             String?
  users            users?   @relation(fields: [gg_id], references: [gg_id], onDelete: Cascade, onUpdate: NoAction)
}

model skills {
  skill_id       String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  skill          Json[]
  gg_id          String?  @db.Uuid
  certifications String[]
  users          users?   @relation(fields: [gg_id], references: [gg_id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  gg_id          String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  first_name     String?      @db.VarChar(50)
  last_name      String?      @db.VarChar(50)
  email          String?      @unique @db.VarChar(100)
  password       String?      @db.VarChar(255)
  phone_number   String?      @unique @db.VarChar(15)
  oauth_provider String?      @db.VarChar(50)
  oauth_token    String?      @db.VarChar(255)
  otp            Int?
  created_at     DateTime?    @default(now()) @db.Timestamp(6)
  image_urls     String[]
  description    String?
  address        String?      @db.VarChar(200)
  dob            String?      @db.VarChar
  region         Json?
  guild_id       String?      @db.Uuid
  username       String?      @unique
  faculty        Json?
  cover_images   String[]
  avatar         avatar[]
  cards          cards[]
  experience     experience[]
  skills         skills[]
}

model guilds {
  description      String?
  guild_name       String?  @unique
  avatar_img       String?
  continent        String?
  skills           String[]
  additionalSkills String[]
  symbol           String?
  color            String?
  alignment        String[]
  id               String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  element          String?
  faculty          Json[]
  guild_frame      String?
}

model continents {
  id             String  @id(map: "Continents_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  continent_name String? @unique(map: "Continents_continent_name_key")
  continent_code String? @unique(map: "Continents_continent_code_key")
}
